{"version":3,"sources":["pages/mobalho/Mobalho.js","pages/products/ipaia/Ipaia.js","App.js","serviceWorker.js","index.js"],"names":["Mobalho","react_default","a","createElement","className","lib","s","src","alt","Component","withRouter","Ipaia","onClick","e","window","location","href","App","BrowserRouter","Switch","Route","exact","path","component","Redirect","to","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oRAMMA,0LAGF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACE,EAAA,IAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,IAAD,CAAKC,EAAG,GAAIF,UAAU,kBACpBH,EAAAC,EAAAC,cAAA,OAAKI,IAAI,2BAA2BC,IAAI,2BAP9BC,cA8BPC,cAAWV,GChCpBW,mLAGF,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACE,EAAA,IAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,IAAD,CAAKC,EAAG,IACNL,EAAAC,EAAAC,cAAA,OAAKI,IAAI,yBAAyBC,IAAI,iBAG1CP,EAAAC,EAAAC,cAACE,EAAA,IAAD,2BAGAJ,EAAAC,EAAAC,cAACE,EAAA,IAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,OAAD,CAAQO,QAAS,SAAAC,GAAC,OAAIC,OAAOC,SAASC,KAAO,2BAA7C,0BAdUP,aAqBLC,cAAWC,GCHXM,mLAdX,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACAlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kBAAkBC,UAAWZ,IAC7CV,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjCC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAUC,GAAG,gBARPhB,aCMZiB,EAAcC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3FjEC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,GAAwB1C,OAAOC,SAASC,MACpDyC,SAAW3C,OAAOC,SAAS0C,OAIvC,OAGF3C,OAAO4C,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMH,GAAN,sBAEP9B,GAgEV,SAAiCK,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BtB,OAAOC,SAASsD,aAKpBvC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCQ,QAAQC,IACN,gHAMJf,EAAgBC,EAAOC,MCxC/BE","file":"static/js/main.e89eb855.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, Button } from 'react-materialize';\nimport { withRouter } from 'react-router-dom'\n\nimport './Mobalho.css'\n\nclass Mobalho extends Component {\n\n  render() {\n    return (\n      <div className=\"center-align\">\n        <Row>\n          <Col s={12} className=\"logo-container\">\n            <img src=\"/images/mobalho-logo.jpg\" alt=\"mobalho-logo\"></img>\n          </Col>\n        </Row>\n\n        {/* <Row>\n          <Col s={12}>\n            <h5>Produtos</h5>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col s={4} offset=\"s4\">\n            <Card\n              actions={[<Button flat onClick={() => this.props.history.push(\"/products/ipaia\")}>Ver mais</Button>]}>\n              <img src=\"/images/ipaia-logo.png\"></img>\n            </Card>\n          </Col>\n        </Row> */}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Mobalho);\n","import React, { Component } from 'react';\nimport { Row, Col, Card, Button } from 'react-materialize';\nimport { withRouter } from 'react-router-dom'\n\nclass Ipaia extends Component {\n\n  render() {\n    return (\n      <div className=\"center-align\">\n        <Row>\n          <Col s={12}>\n            <img src=\"/images/ipaia-logo.png\" alt=\"ipaia-logo\"></img>\n          </Col>\n        </Row>\n        <Row>\n          iPaia Ã© isso ai\n        </Row>\n        <Row>\n          <Button onClick={e => window.location.href = \"http://ipaia.github.io\"}>Ir para iPaia</Button>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Ipaia);\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Mobalho from './pages/mobalho/Mobalho';\nimport Ipaia from './pages/products/ipaia/Ipaia';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n        <Route exact path=\"/products/ipaia\" component={Ipaia} />\n          <Route exact path=\"/\" component={Mobalho} />\n          <Route>\n            <Redirect to=\"/\" />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}